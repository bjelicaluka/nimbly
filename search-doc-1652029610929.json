[{"title":"How it works","type":0,"sectionRef":"#","url":"docs/v1/how-it-works/","content":"How it works Under the hood, Nimbly is using JavaScript's Proxy API to intercept all method calls and gather the required information for registring the routes. Nimbly keeps all services in it's own internal service registry, and implements Dependency Inversion principle. The registry contains all services from a Nimble, and is injected as a first parameter of every service constructor. Client is using Axios for sending HTTP requests. Server is using Express for creating a web API. It implements the custom logic for creating OpenAPI documentation based on the information gathered from the Nimble services. SwaggerUI is created using the swagger-ui-express library.","keywords":""},{"title":"Auto Generation","type":0,"sectionRef":"#","url":"docs/v1/auto-generation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Auto Generation","url":"docs/v1/auto-generation/#prerequisites","content":"You need to have installed the nimbly-client library in your project. "},{"title":"Syntax​","type":1,"pageTitle":"Auto Generation","url":"docs/v1/auto-generation/#syntax","content":"The syntax is simple, you need to run the nimbly-client library and pass the following arguments: command generate - generates the TypeScript client. generate-js - generates the JavaScript client. log - just fetches the meta info from the url, good for testing. url - the url of the Nimbly deployment.output-dir - the path of the directory (existing or new) in which the client files will be stored. "},{"title":"Generating the Client​","type":1,"pageTitle":"Auto Generation","url":"docs/v1/auto-generation/#generating-the-client","content":""},{"title":"TypeScript​","type":1,"pageTitle":"Auto Generation","url":"docs/v1/auto-generation/#typescript","content":"node node_modules/nimbly-client/build generate http://localhost:3000 ./path/to/output/dir/ Copy "},{"title":"JavaScript​","type":1,"pageTitle":"Auto Generation","url":"docs/v1/auto-generation/#javascript","content":"node node_modules/nimbly-client/build generate-js http://localhost:3000 ./path/to/output/dir/ Copy "},{"title":"Client Installation","type":0,"sectionRef":"#","url":"docs/v1/client-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#installation","content":"To install the latest release: NPMYarn npm install nimbly-client Copy To install a specific version: NPMYarn npm install nimbly-client@version Copy "},{"title":"Miscellaneous​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#dependency-tree","content":"A basic installation of the client includes 2 packages: nimbly-client@1.2.3 ├── axios@0.24.0 └── blueimp-tmpl@3.20.0 Copy "},{"title":"Client Initialization","type":0,"sectionRef":"#","url":"docs/v1/client-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#standalone","content":"CommonJSES modulesTypeScript const { Nimble } = require(&quot;nimbly-client&quot;); class ExampleService { async get() {} } const nimble = new Nimble().ofRemote(ExampleService, &quot;http://localhost:3000&quot;); const { exampleService } = nimble.services(); Copy "},{"title":"Options​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/v1/getting-started/","content":"","keywords":""},{"title":"Setting up the server​","type":1,"pageTitle":"Getting Started","url":"docs/v1/getting-started/#setting-up-the-server","content":"Initialize the project npm init -y Copy Install nimbly-api library npm i -S nimbly-api Copy Implement services class UserService { async createUser(user) { // logic for adding the user return user; } } class AccountService { // UserService is automatically injected constructor({ userService }) { this.userService = userService; } async getAllAccounts() { return []; } // take accountInfo object as parameter async createAccount({username, firstName, lastName, email}) { // logic for adding the account const newAccount = {id: 1, username}; // call another service this.userService.createUser({ accountId: newAccount.id, firstName, lastName, email }) return newAccount; } } Copy Create a Nimble of services import { Nimble } from 'nimbly-api'; const usersNimble = new Nimble() .ofLocal(UserService) .andLocal(AccountService); // The instances are available for custom usage const { userService, accountService } = usersNimble.services(); Copy Create the NimblyApi import { NimblyApi } from 'nimbly-api'; const app = new NimblyApi().from(usersNimble); app.listen(3000); Copy 3 routes have been registered POST /api/user-service/create-userGET /api/account-service/get-all-accountsPOST /api/account-service/create-account "},{"title":"Setting up the client​","type":1,"pageTitle":"Getting Started","url":"docs/v1/getting-started/#setting-up-the-client","content":"Initialize the project npm init -y Copy Install nimbly-client library npm i -S nimbly-client Copy Define services class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} async createAccount(account) {} } Copy Create a Nimble of remote services import { Nimble } from 'nimbly-client'; const host = 'http://localhost:3000'; const usersNimble = new Nimble() .ofRemote(UserService, host) .andRemote(AccountService, host); // The instances are available for custom usage const { userService, accountService } = usersNimble.services(); // Use the services accountService.createAccount({ username: 'test', email: 'test@test.com', firstName: 'Test', lastName: 'Test', }) .then(newAccount =&gt; console.log(newAccount)) // created account from server .catch(error =&gt; console.log(error)); // Fetch all accounts const allAccounts = await accountService.getAllAccounts(); Copy 2 requests have been sent POST /api/account-service/create-accountbody: { username: 'test', email: 'test@test.com', firstName: 'Test', lastName: 'Test' }GET /api/account-service/get-all-accounts "},{"title":"API Interceptors","type":0,"sectionRef":"#","url":"docs/v1/api-interceptors/","content":"","keywords":""},{"title":"Intercept All Before​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-all-before","content":"// Intercept all service handlers before they are called const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .interceptAll((req: Request, res: Response, next: NextFunction) =&gt; { if(isTokenValid(req.headers.Authorization)) next(); else res.sendStatus(401); }) .from(usersNimble); Copy "},{"title":"Intercept Specific Before​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-before","content":"// Intercept specific service handlers before they are called const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .intercept({ userService: { createUser: (req: Request, res: Response, next: NextFunction) =&gt; { if(isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); } } }) .from(usersNimble); Copy "},{"title":"Intercept Specific Before - Interceptor Class​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-before---interceptor-class","content":"// Intercept specific service handlers before they are called with Interceptor class class UserServiceInterceptor { createUser(req: Request, res: Response, next: NextFunction) { if(isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); } } const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .intercept({ userService: { createUser: UserServiceInterceptor } }) .from(usersNimble); Copy "},{"title":"Intercept All After​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-all-after","content":"// Intercept all service handlers after they are called const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .interceptAllAfter((req: Request, res: Response, next: NextFunction) =&gt; { res.body({ message: &quot;Hello from Nimbly.&quot; }); }) .from(usersNimble); Copy "},{"title":"Intercept Specific After​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-after","content":"// Intercept specific service handlers after they are called const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .interceptAfter({ userService: { createUser: (req: Request, res: Response, next: NextFunction) =&gt; { res.status(201); next(); } } }) .from(usersNimble); Copy "},{"title":"Intercept Specific After - Interceptor Class​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-after---interceptor-class","content":"// Intercept specific service handlers after they are called with Interceptor class class UserServiceInterceptor { createUser(req: Request, res: Response, next: NextFunction) { res.status(201); next(); } } const usersNimble = new Nimble().ofLocal(UserService); const app = new NimblyApi() .interceptAfter({ userService: { createUser: UserServiceInterceptor } }) .from(usersNimble); Copy "},{"title":"Server Installation","type":0,"sectionRef":"#","url":"docs/v1/server-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#installation","content":"To install the latest release: NPMYarn npm install nimbly-api Copy To install a specific version: NPMYarn npm install nimbly-api@version Copy "},{"title":"Miscellaneous​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#dependency-tree","content":"A basic installation of the server includes 4 packages: nimbly-api@1.2.3 ├── cors@2.8.5 ├── express@4.17.1 ├── nimbly-client@1.2.0 └── swagger-ui-express@4.3.0 Copy "},{"title":"Client API","type":0,"sectionRef":"#","url":"docs/v1/client-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#reference","content":"The following is the Nimble class with all method signatures. export class Nimble { constructor(); public of(type: Constructor): Nimble; public ofLocal(type: Constructor): Nimble; public andLocal(type: Constructor): Nimble; public ofRemote(type: Constructor, origin: string, basePath?: string): Nimble; public andRemote(type: Constructor, origin: string, basePath?: string): Nimble; public interceptCalls(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): Nimble; public interceptResults(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): Nimble; public interceptAllCalls(callback: InterceptorCallback): Nimble; public interceptAllResults(callback: InterceptorCallback): Nimble; public services(): any; } Copy "},{"title":"new Nimble()​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#new-nimble","content":"Creates a new instance of Nimble. "},{"title":"nimble.of(type)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleoftype","content":"Registers a local service class to the nimble. type &lt;Constructor&gt; "},{"title":"nimble.ofLocal(type)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleoflocaltype","content":"Registers a local service class to the nimble. type &lt;Constructor&gt; "},{"title":"nimble.andLocal(type)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleandlocaltype","content":"Registers a local service class to the nimble. type &lt;Constructor&gt; "},{"title":"nimble.ofRemote(type, origin[, basePath])​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleofremotetype-origin-basepath","content":"Registers a remote service class to the nimble. type &lt;Constructor&gt; origin &lt;string&gt; basePath? &lt;string&gt; "},{"title":"nimble.andRemote(type, origin[, basePath])​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleandremotetype-origin-basepath","content":"Registers a remote service class to the nimble. type &lt;Constructor&gt; origin &lt;string&gt; basePath? &lt;string&gt; "},{"title":"nimble.interceptCalls(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptcallsinterceptors","content":"Registers a set of custom Client interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptResults(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptresultsinterceptors","content":"Registers a set of custom Client interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptAllCalls(callback)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptallcallscallback","content":"Registers a custom Client interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.interceptAllResults(callback)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptallresultscallback","content":"Registers a custom Client interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.services()​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleservices","content":"Returns Nimble's service registry. "},{"title":"Types​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#types","content":""},{"title":"Constructor​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#constructor","content":"interface Constructor { new (...args: any[]); } Copy "},{"title":"NimblyInfo​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimblyinfo","content":"type NimblyInfo = { version?: string; name?: string; description?: string; basePath?: string; } Copy "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#interceptorcallback","content":"type InterceptorCallback = ({setHeader, getHeader, setBody, getBody}: {setHeader: (key: string, value: string) =&gt; any, getHeader: (key: string) =&gt; string, setBody: (body: any) =&gt; any, getBody: () =&gt; any}) =&gt; any; Copy "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } }; Copy "},{"title":"Client Interceptors","type":0,"sectionRef":"#","url":"docs/v1/client-interceptors/","content":"","keywords":""},{"title":"Intercept All Before​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-all-before","content":"// Intercept all service calls const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptAllCalls(({setHeader, getHeader, setBody, getBody}) =&gt; { setHeader('Authorization', 'Bearer &lt;token&gt;'); }); Copy "},{"title":"Intercept Specific Before​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-before","content":"// Intercept only specific method calls const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptCalls({ userService: { getTest({setHeader, getHeader, setBody, getBody}) { setBody({ ...getBody(), timestamp: new Date() }); } } }); Copy "},{"title":"Intercept Specific Before - Interceptor Class​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-before---interceptor-class","content":"// Define interceptors with an interceptor class class UserServiceCallInterceptor { getTest({setHeader, getHeader, setBody, getBody}) { setHeader('classCallInterceptor', 'Works!') } } const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptCalls({ userService: UserServiceCallInterceptor }); Copy "},{"title":"Intercept All After​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-all-after","content":"// Intercept all service results const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptAllResults(({setHeader, getHeader, setBody, getBody}) =&gt; { validateBody(getBody()); setToken(getHeader('Token')); }); Copy "},{"title":"Intercept Specific After​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-after","content":"// Intercept only specific method results const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptResults({ userService: { getTest({setHeader, getHeader, setBody, getBody}) { setBody({ ...getBody(), count: getBody().items.length }); } } }); Copy "},{"title":"Intercept Specific After - Interceptor Class​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-after---interceptor-class","content":"// Define interceptors with an interceptor class class UserServiceResultInterceptor { getTest({setHeader, getHeader, setBody, getBody}) { setHeader('classResultInterceptor', 'Works!') } } const usersNimble = new Nimble() .ofRemote(UserService, host) .interceptResults({ userService: UserServiceResultInterceptor }); Copy "},{"title":"Server API","type":0,"sectionRef":"#","url":"docs/v1/server-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#reference","content":"The following is the NimblyApi class with all method signatures. export class NimblyApi { constructor(); constructor(options: {app?: Application, nimblyInfo?: NimblyInfo, basePath?: string}); public intercept(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): NimblyApi; public interceptAfter(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): NimblyApi; public interceptAll(callback: InterceptorCallback): NimblyApi; public interceptAllAfter(callback: InterceptorCallback): NimblyApi; public withErrors(errors: ErrorRegistry): NimblyApi; public from(...nimbles: Nimble[]): Application; } Copy "},{"title":"new NimblyApi(options)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#new-nimblyapioptions","content":"Creates a new instance of NimblyApi. options &lt;Object&gt; app? &lt;Application&gt; nimblyInfo? &lt;NimblyInfo&gt; basePath? &lt;string&gt; "},{"title":"nimblyApi.from(nimbles)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapifromnimbles","content":"Creates a new Express Application from a set of Nimbles. nimbles &lt;Array&gt; "},{"title":"nimblyApi.intercept(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapiinterceptinterceptors","content":"Registers a set of custom API interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimblyApi.interceptAfter(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapiinterceptafterinterceptors","content":"Registers a set of custom API interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimblyApi.interceptAll(callback)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapiinterceptallcallback","content":"Registers a custom API interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimblyApi.interceptAllAfter(callback)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapiinterceptallaftercallback","content":"Registers a custom API interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimblyApi.withErrors(errorRegistry)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyapiwitherrorserrorregistry","content":"Registers a set of custom error status codes that set the response status based on the error that is thrown. errorRegistry &lt;ErrorRegistry&gt; "},{"title":"Types​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#types","content":""},{"title":"NimblyInfo​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#nimblyinfo","content":"type NimblyInfo = { version?: string; name?: string; description?: string; basePath?: string; } Copy "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#interceptorcallback","content":"type InterceptorCallback = (req: Request, res: Response, next: NextFunction) =&gt; any; Copy "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } }; Copy "},{"title":"ErrorRegistry​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#errorregistry","content":"type ErrorRegistry = { [key: string]: number }; Copy "},{"title":"Server Initialization","type":0,"sectionRef":"#","url":"docs/v1/server-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#standalone","content":"CommonJSES modulesTypeScript const { NimblyApi, Nimble } = require('nimbly-api'); const nimble = new Nimble().of(/* service */); const app = new NimblyApi().from(nimble); app.listen(3000); Copy This implicitly starts a Express Application. "},{"title":"With an existing Express Application​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#with-an-existing-express-application","content":"CommonJSES modulesTypeScript const express = require(&quot;express&quot;); const { NimblyApi, Nimble } = require('nimbly-api'); const nimble = new Nimble().of(/* service */); const existingApp = express(); const app = new NimblyApi({ app: existingApp }).from(nimble); existingApp.listen(3000); Copy caution Using app.listen(3000) will not work here, as it creates a new HTTP server. "},{"title":"Options​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"NimblyApi","type":0,"sectionRef":"#","url":"docs/v1/nimbly-api/","content":"","keywords":""},{"title":"What NimblyApi is​","type":1,"pageTitle":"NimblyApi","url":"docs/v1/nimbly-api/#what-nimblyapi-is","content":"NimblyApi is responsible for automatically creating a RestAPI from a set of Nimbles. It is also responsible for automatically building OpenAPI documentation, and serving SwaggerUI on route /explorer. "},{"title":"Creating an API​","type":1,"pageTitle":"NimblyApi","url":"docs/v1/nimbly-api/#creating-an-api","content":""},{"title":"From Plain Local Services​","type":1,"pageTitle":"NimblyApi","url":"docs/v1/nimbly-api/#from-plain-local-services","content":"CommonJSES modulesTypeScript const { Nimble, NimblyApi } = require('nimbly-api'); class UserService { async createUser(user) { return user; } } class AccountService { async getAllAccounts() { return []; } } const usersNimble = new Nimble() .ofLocal(UserService) .andLocal(AccountService); const app = new NimblyApi().from(usersNimble); app.listen(3000); Copy  "},{"title":"From Plain Remote Services​","type":1,"pageTitle":"NimblyApi","url":"docs/v1/nimbly-api/#from-plain-remote-services","content":"info An API can also be generated from a set of remote services, so that the API acts as an API Gateway. CommonJSES modulesTypeScript const { Nimble, NimblyApi } = require('nimbly-api'); class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} } const usersNimble = new Nimble() .ofRemote(UserService, 'http://localhost:3000') .andRemote(AccountService, 'http://localhost:3000'); const app = new NimblyApi().from(usersNimble); app.listen(3000); Copy  "},{"title":"From Configured Local Services​","type":1,"pageTitle":"NimblyApi","url":"docs/v1/nimbly-api/#from-configured-local-services","content":"CommonJSES modulesTypeScript const { Nimble, NimblyApi } = require('nimbly-api'); class UserService { $nimbly = { rootPath: '/users', createUser: { method: 'POST', path: '/', body: true } } async createUser(user) { return user; } } class AccountService { $nimbly = { rootPath: '/accounts', getAllAccounts: { method: 'GET', path: '/' } } async getAllAccounts() { return []; } } const usersNimble = new Nimble() .ofLocal(UserService) .andLocal(AccountService); const app = new NimblyApi().from(usersNimble); app.listen(3000); Copy  "},{"title":"Nimble","type":0,"sectionRef":"#","url":"docs/v1/nimble/","content":"","keywords":""},{"title":"What Nibmle is​","type":1,"pageTitle":"Nimble","url":"docs/v1/nimble/#what-nibmle-is","content":"Nimble holds a set of related service classes. It is responsible for handling their lifecycle and managing their dependencies. Nimble can hold Local or Remote services. "},{"title":"Local Services​","type":1,"pageTitle":"Nimble","url":"docs/v1/nimble/#local-services","content":"Local services are ones that are running in the same process as Nimble. CommonJSES modulesTypeScript const { Nimble } = require(&quot;nimbly-client&quot;); // or &quot;nimbly-api&quot; class UserService { async getAll() { return []; } } class AccountService { constructor({ userService }) { this.userService = userService; } async getAll() { const accounts = []; const users = await this.userService.getAll(); return users.map(user =&gt; ({ ...user, account: accounts.find(acc =&gt; acc.id === user.accountId) })); } } // Creating the Nimble const nimble = new Nimble().ofLocal(UserService).andLocal(AccountService); // Getting the services out of the Nimble. const { accountService } = nimble.services(); Copy "},{"title":"Remote Services​","type":1,"pageTitle":"Nimble","url":"docs/v1/nimble/#remote-services","content":"Remote services are, as the name suggests, running in a different process, or on a different server. Methods of a remote service, that is in a Nimble do not require any implementation code, but do require the URL of the server they are running on. CommonJSES modulesTypeScript const { Nimble } = require(&quot;nimbly-client&quot;); // or &quot;nimbly-api&quot; class UserService { async getAll() {} } class AccountService { async getAll() {} } // Creating the Nimble const nimble = new Nimble() .ofRemote(UserService, &quot;http://localhost:3000&quot;) .andRemote(AccountService, &quot;http://localhost:3000&quot;); // Getting the services out of the Nimble. const { accountService } = nimble.services(); Copy Nimble implicitly creates a Proxy for each service that gets the results of method calls over HTTP. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/v1/","content":"","keywords":""},{"title":"What Nimbly is​","type":1,"pageTitle":"Introduction","url":"docs/v1/#what-nimbly-is","content":"Nimbly is a JavaScript framework that enables rapid development of web applications. It is built on top of the Express framework and provides additional features like automatic routes registration, client generation and OpenAPI documentation, along with SwaggerUI. Here's a basic example: CommonJSES modulesTypeScript Server​ const { Nimble, NimblyApi } = require('nimbly-api'); class UserService { async createUser(user) { // logic for adding the user return user; } } class AccountService { // UserService is automatically injected constructor({ userService }) { this.userService = userService; } async getAllAccounts() { return []; } // take accountInfo object as parameter async createAccount({username}) { // logic for adding the account const newAccount = {id: 1, username}; // call another service this.userService.createUser({ accountId: newAccount.id }) return newAccount; } } const usersNimble = new Nimble() .ofLocal(UserService) .andLocal(AccountService); const app = new NimblyApi().from(usersNimble); app.listen(3000); Copy CommonJSES modulesTypeScript Client​ const { Nimble } = require('nimbly-client'); const host = 'http://localhost:3000'; class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} async createAccount(account) {} } const usersNimble = new Nimble() .ofRemote(UserService, host) .andRemote(AccountService, host); // The instances are available for custom usage const { userService, accountService } = usersNimble.services(); // Use the services accountService.createAccount({ username: 'test', }) .then(newAccount =&gt; console.log(newAccount)) // created account from server .catch(error =&gt; console.log(error)); // Fetch all accounts const allAccounts = await accountService.getAllAccounts(); Copy "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"docs/v1/#features","content":"Here are the features provided by Nimbly: "},{"title":"API​","type":1,"pageTitle":"Introduction","url":"docs/v1/#api","content":"Express Application is automatically created based on the service classes passed to the Nimble. "},{"title":"Client​","type":1,"pageTitle":"Introduction","url":"docs/v1/#client-3","content":"Client service proxy is automatically created based on the service classes passed to the Nimble. "},{"title":"Automatic JS/TS Client generation​","type":1,"pageTitle":"Introduction","url":"docs/v1/#automatic-jsts-client-generation","content":"nimbly-client package can be used to auto-generate client service files for the existing API. "},{"title":"Interceptors​","type":1,"pageTitle":"Introduction","url":"docs/v1/#interceptors","content":"Both Server and Client support defining interceptors. Most common use case for interceptors is handling Authorization, where the client sends a secret with an identity and the server validates it. "},{"title":"Automatic OpenAPI docs​","type":1,"pageTitle":"Introduction","url":"docs/v1/#automatic-openapi-docs","content":"Server automatically builds OpenAPI documentation, and serves SwaggerUI on route /explorer. "},{"title":"Next steps​","type":1,"pageTitle":"Introduction","url":"docs/v1/#next-steps","content":"Server installationClient installation "},{"title":"Service class","type":0,"sectionRef":"#","url":"docs/v1/service-class/","content":"","keywords":""},{"title":"What Service class is​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#what-service-class-is","content":"Service class is a JavaScript class that implements some arbitrary piece of business logic. It's methods can have parameters, and can also return results. "},{"title":"Plain​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#plain","content":"Plain JavaScript classes can be used. CommonJSES modulesTypeScript class ExampleService { async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } Copy "},{"title":"Configured​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#configured","content":"If you'd like the service, and its methods to be registered on a different route path from the default ones, you can customize them in a $nimbly property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $nimbly = { rootPath: '/', getAll: { method: 'GET', path: '/' }, getById: { method: 'GET', path: '/:id' }, add: { method: 'POST', path: '/', body: true }, update: { method: 'PUT', path: '/:id', body: true }, delete: { method: 'DELETE', path: '/:id' }, } async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } Copy important Configuration must be used both on the client and the server side, since it is used for telling Nimbly how and where to send the requests, or register the API routes. "}]