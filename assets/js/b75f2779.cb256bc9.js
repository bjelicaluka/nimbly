"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[7202],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},332:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=["components"],s={title:"Get started"},l="Get started",p={type:"mdx",permalink:"/get-started/chat",source:"@site/src/pages/get-started/chat.md",title:"Get started",description:"In this guide we\u2019ll create a basic chat application. It requires almost no basic prior knowledge of Node.JS or Socket.IO, so it\u2019s ideal for users of all knowledge levels.",frontMatter:{title:"Get started"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"The web framework",id:"the-web-framework",children:[],level:2},{value:"Serving HTML",id:"serving-html",children:[],level:2},{value:"Integrating Socket.IO",id:"integrating-socketio",children:[],level:2},{value:"Emitting events",id:"emitting-events",children:[],level:2},{value:"Broadcasting",id:"broadcasting",children:[],level:2},{value:"Homework",id:"homework",children:[],level:2},{value:"Getting this example",id:"getting-this-example",children:[],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-started"},"Get started"),(0,i.kt)("p",null,"In this guide we\u2019ll create a basic chat application. It requires almost no basic prior knowledge of Node.JS or Socket.IO, so it\u2019s ideal for users of all knowledge levels."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Writing a chat application with popular web applications stacks like LAMP (PHP) has normally been very hard. It involves polling the server for changes, keeping track of timestamps, and it\u2019s a lot slower than it should be."),(0,i.kt)("p",null,"Sockets have traditionally been the solution around which most real-time chat systems are architected, providing a bi-directional communication channel between a client and a server."),(0,i.kt)("p",null,"This means that the server can ",(0,i.kt)("em",{parentName:"p"},"push")," messages to clients. Whenever you write a chat message, the idea is that the server will get it and push it to all other connected clients."),(0,i.kt)("h2",{id:"the-web-framework"},"The web framework"),(0,i.kt)("p",null,"The first goal is to set up a simple HTML webpage that serves out a form and a list of messages. We\u2019re going to use the Node.JS web framework ",(0,i.kt)("inlineCode",{parentName:"p"},"express")," to this end. Make sure ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.JS")," is installed."),(0,i.kt)("p",null,"First let\u2019s create a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," manifest file that describes our project. I recommend you place it in a dedicated empty directory (I\u2019ll call mine ",(0,i.kt)("inlineCode",{parentName:"p"},"chat-example"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "socket-chat-example",\n  "version": "0.0.1",\n  "description": "my first socket.io app",\n  "dependencies": {}\n}\n')),(0,i.kt)("p",null,"Now, in order to easily populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," property with the things we need, we\u2019ll use ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install express@4\n")),(0,i.kt)("p",null,"Once it's installed we can create an ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," file that will set up our application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\n\napp.get('/', (req, res) => {\n  res.send('<h1>Hello world</h1>');\n});\n\nserver.listen(3000, () => {\n  console.log('listening on *:3000');\n});\n")),(0,i.kt)("p",null,"This means that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Express initializes ",(0,i.kt)("inlineCode",{parentName:"li"},"app")," to be a function handler that you can supply to an HTTP server (as seen in line 4)."),(0,i.kt)("li",{parentName:"ul"},"We define a route handler ",(0,i.kt)("inlineCode",{parentName:"li"},"/")," that gets called when we hit our website home."),(0,i.kt)("li",{parentName:"ul"},"We make the http server listen on port 3000.")),(0,i.kt)("p",null,"If you run ",(0,i.kt)("inlineCode",{parentName:"p"},"node index.js")," you should see the following:"),(0,i.kt)("img",{src:"/images/chat-1.png",alt:"A console saying that the server has started listening on port 3000"}),(0,i.kt)("p",null,"And if you point your browser to ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),":"),(0,i.kt)("img",{src:"/images/chat-2.png",alt:"A browser displaying a big 'Hello World'"}),(0,i.kt)("h2",{id:"serving-html"},"Serving HTML"),(0,i.kt)("p",null,"So far in ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," we\u2019re calling ",(0,i.kt)("inlineCode",{parentName:"p"},"res.send")," and passing it a string of HTML. Our code would look very confusing if we just placed our entire application\u2019s HTML there, so instead we're going to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," file and serve that instead."),(0,i.kt)("p",null,"Let\u2019s refactor our route handler to use ",(0,i.kt)("inlineCode",{parentName:"p"},"sendFile")," instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n")),(0,i.kt)("p",null,"Put the following in your ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Socket.IO chat</title>\n    <style>\n      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }\n\n      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }\n      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }\n      #input:focus { outline: none; }\n      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }\n\n      #messages { list-style-type: none; margin: 0; padding: 0; }\n      #messages > li { padding: 0.5rem 1rem; }\n      #messages > li:nth-child(odd) { background: #efefef; }\n    </style>\n  </head>\n  <body>\n    <ul id="messages"></ul>\n    <form id="form" action="">\n      <input id="input" autocomplete="off" /><button>Send</button>\n    </form>\n  </body>\n</html>\n')),(0,i.kt)("p",null,"If you restart the process (by hitting Control+C and running ",(0,i.kt)("inlineCode",{parentName:"p"},"node index.js")," again) and refresh the page it should look like this:"),(0,i.kt)("img",{src:"/images/chat-3.png",alt:"A browser displaying an input and a 'Send' button"}),(0,i.kt)("h2",{id:"integrating-socketio"},"Integrating Socket.IO"),(0,i.kt)("p",null,"Socket.IO is composed of two parts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A server that integrates with (or mounts on) the Node.JS HTTP Server ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/socketio/socket.io"},"socket.io")),(0,i.kt)("li",{parentName:"ul"},"A client library that loads on the browser side ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/socketio/socket.io-client"},"socket.io-client"))),(0,i.kt)("p",null,"During development, ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io")," serves the client automatically for us, as we\u2019ll see, so for now we only have to install one module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install socket.io\n")),(0,i.kt)("p",null,"That will install the module and add the dependency to ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". Now let\u2019s edit ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," to add it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\nconst { Server } = require(\"socket.io\");\nconst io = new Server(server);\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n});\n\nserver.listen(3000, () => {\n  console.log('listening on *:3000');\n});\n")),(0,i.kt)("p",null,"Notice that I initialize a new instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io")," by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," (the HTTP server) object. Then I listen on the ",(0,i.kt)("inlineCode",{parentName:"p"},"connection")," event for incoming sockets and log it to the console."),(0,i.kt)("p",null,"Now in index.html add the following snippet before the ",(0,i.kt)("inlineCode",{parentName:"p"},"</body>")," (end body tag):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script src="/socket.io/socket.io.js"><\/script>\n<script>\n  var socket = io();\n<\/script>\n')),(0,i.kt)("p",null,"That\u2019s all it takes to load the ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io-client"),", which exposes an ",(0,i.kt)("inlineCode",{parentName:"p"},"io")," global (and the endpoint ",(0,i.kt)("inlineCode",{parentName:"p"},"GET /socket.io/socket.io.js"),"), and then connect."),(0,i.kt)("p",null,"If you would like to use the local version of the client-side JS file, you can find it at ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules/socket.io/client-dist/socket.io.js"),"."),(0,i.kt)("p",null,"Notice that I\u2019m not specifying any URL when I call ",(0,i.kt)("inlineCode",{parentName:"p"},"io()"),", since it defaults to trying to connect to the host that serves the page."),(0,i.kt)("p",null,"If you now restart the process (by hitting Control+C and running ",(0,i.kt)("inlineCode",{parentName:"p"},"node index.js")," again) and then refresh the webpage you should see the console print \u201ca user connected\u201d."),(0,i.kt)("p",null,"Try opening several tabs, and you\u2019ll see several messages."),(0,i.kt)("img",{src:"/images/chat-4.png",alt:"A console displaying several messages, indicating that some users have connected"}),(0,i.kt)("p",null,"Each socket also fires a special ",(0,i.kt)("inlineCode",{parentName:"p"},"disconnect")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"io.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('disconnect', () => {\n    console.log('user disconnected');\n  });\n});\n")),(0,i.kt)("p",null,"Then if you refresh a tab several times you can see it in action."),(0,i.kt)("img",{src:"/images/chat-5.png",alt:"A console displaying several messages, indicating that some users have connected and disconnected"}),(0,i.kt)("h2",{id:"emitting-events"},"Emitting events"),(0,i.kt)("p",null,"The main idea behind Socket.IO is that you can send and receive any events you want, with any data you want. Any objects that can be encoded as JSON will do, and ",(0,i.kt)("a",{parentName:"p",href:"/blog/introducing-socket-io-1-0/#binary"},"binary data")," is supported too."),(0,i.kt)("p",null,"Let\u2019s make it so that when the user types in a message, the server gets it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"chat message")," event. The ",(0,i.kt)("inlineCode",{parentName:"p"},"script")," section in ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," should now look as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script src=\"/socket.io/socket.io.js\"><\/script>\n<script>\n  var socket = io();\n\n  var form = document.getElementById('form');\n  var input = document.getElementById('input');\n\n  form.addEventListener('submit', function(e) {\n    e.preventDefault();\n    if (input.value) {\n      socket.emit('chat message', input.value);\n      input.value = '';\n    }\n  });\n<\/script>\n")),(0,i.kt)("p",null,"And in ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," we print out the ",(0,i.kt)("inlineCode",{parentName:"p"},"chat message")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"io.on('connection', (socket) => {\n  socket.on('chat message', (msg) => {\n    console.log('message: ' + msg);\n  });\n});\n")),(0,i.kt)("p",null,"The result should be like the following video:"),(0,i.kt)("video",{autoplay:"",loop:"",width:"100%"},(0,i.kt)("source",{src:"https://i.cloudup.com/transcoded/zboNrGSsai.mp4"})),(0,i.kt)("h2",{id:"broadcasting"},"Broadcasting"),(0,i.kt)("p",null,"The next goal is for us to emit the event from the server to the rest of the users."),(0,i.kt)("p",null,"In order to send an event to everyone, Socket.IO gives us the ",(0,i.kt)("inlineCode",{parentName:"p"},"io.emit()")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"io.emit('some event', { someProperty: 'some value', otherProperty: 'other value' }); // This will emit the event to all connected sockets\n")),(0,i.kt)("p",null,"If you want to send a message to everyone except for a certain emitting socket, we have the ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast")," flag for emitting from that socket:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"io.on('connection', (socket) => {\n  socket.broadcast.emit('hi');\n});\n")),(0,i.kt)("p",null,"In this case, for the sake of simplicity we\u2019ll send the message to everyone, including the sender."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"io.on('connection', (socket) => {\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n")),(0,i.kt)("p",null,"And on the client side when we capture a ",(0,i.kt)("inlineCode",{parentName:"p"},"chat message")," event we\u2019ll include it in the page. The ",(0,i.kt)("em",{parentName:"p"},"total")," client-side JavaScript code now amounts to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script src=\"/socket.io/socket.io.js\"><\/script>\n<script>\n  var socket = io();\n\n  var messages = document.getElementById('messages');\n  var form = document.getElementById('form');\n  var input = document.getElementById('input');\n\n  form.addEventListener('submit', function(e) {\n    e.preventDefault();\n    if (input.value) {\n      socket.emit('chat message', input.value);\n      input.value = '';\n    }\n  });\n\n  socket.on('chat message', function(msg) {\n    var item = document.createElement('li');\n    item.textContent = msg;\n    messages.appendChild(item);\n    window.scrollTo(0, document.body.scrollHeight);\n  });\n<\/script>\n")),(0,i.kt)("p",null,"And that completes our chat application, in about 20 lines of code! This is what it looks like:"),(0,i.kt)("video",{autoplay:"",loop:"",width:"100%"},(0,i.kt)("source",{src:"https://i.cloudup.com/transcoded/J4xwRU9DRn.mp4"})),(0,i.kt)("h2",{id:"homework"},"Homework"),(0,i.kt)("p",null,"Here are some ideas to improve the application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Broadcast a message to connected users when someone connects or disconnects."),(0,i.kt)("li",{parentName:"ul"},"Add support for nicknames."),(0,i.kt)("li",{parentName:"ul"},"Don\u2019t send the same message to the user that sent it. Instead, append the message directly as soon as he/she presses enter."),(0,i.kt)("li",{parentName:"ul"},"Add \u201c{user} is typing\u201d functionality."),(0,i.kt)("li",{parentName:"ul"},"Show who\u2019s online."),(0,i.kt)("li",{parentName:"ul"},"Add private messaging."),(0,i.kt)("li",{parentName:"ul"},"Share your improvements!")),(0,i.kt)("h2",{id:"getting-this-example"},"Getting this example"),(0,i.kt)("p",null,"You can find it on GitHub ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/socketio/chat-example"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://github.com/socketio/chat-example.git\n")))}u.isMDXComponent=!0}}]);