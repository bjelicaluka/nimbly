"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[651],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),s=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||c;return t?r.createElement(v,l(l({ref:n},u),{},{components:t})):r.createElement(v,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,l=new Array(c);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<c;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(7462),a=t(7294),c=t(2389),l=t(9548),i=t(6010),o="tabItem_LplD";function s(e){var n,t,c,s=e.lazy,u=e.block,p=e.defaultValue,d=e.values,m=e.groupId,v=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=d?d:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),f=(0,l.lx)(h,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(n=null!=p?p:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(c=b[0])?void 0:c.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),S=g.tabGroupChoices,A=g.setTabGroupChoices,k=(0,a.useState)(y),N=k[0],w=k[1],T=[],I=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=S[m];null!=x&&x!==N&&h.some((function(e){return e.value===x}))&&w(x)}var j=function(e){var n=e.currentTarget,t=T.indexOf(n),r=h[t].value;r!==N&&(I(n),w(r),null!=m&&A(m,r))},C=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=T.indexOf(e.currentTarget)+1;t=T[r]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;t=T[a]||T[T.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},v)},h.map((function(e){var n=e.value,t=e.label,c=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:function(e){return T.push(e)},onKeyDown:C,onFocus:j,onClick:j},c,{className:(0,i.Z)("tabs__item",o,null==c?void 0:c.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(b.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function u(e){var n=(0,c.Z)();return a.createElement(s,(0,r.Z)({key:String(n)},e))}},2849:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=t(7462),a=t(3366),c=(t(7294),t(3905)),l=t(9877),i=t(8215),o=["components"],s={title:"Introduction",sidebar_position:1,slug:"/"},u=void 0,p={unversionedId:"categories/Introduction/index",id:"categories/Introduction/index",title:"Introduction",description:"What N1mbly is",source:"@site/docs/categories/01-Introduction/index.md",sourceDirName:"categories/01-Introduction",slug:"/",permalink:"/nimbly/docs/v1/",tags:[],version:"current",lastUpdatedAt:1654282889,formattedLastUpdatedAt:"6/3/2022",sidebarPosition:1,frontMatter:{title:"Introduction",sidebar_position:1,slug:"/"},sidebar:"sidebar",next:{title:"How it works",permalink:"/nimbly/docs/v1/how-it-works/"}},d=[{value:"What N1mbly is",id:"what-n1mbly-is",children:[{value:"Server",id:"server",children:[],level:4},{value:"Server",id:"server-1",children:[],level:4},{value:"Server",id:"server-2",children:[],level:4},{value:"Client",id:"client",children:[],level:4},{value:"Client",id:"client-1",children:[],level:4},{value:"Client",id:"client-2",children:[],level:4}],level:2},{value:"Features",id:"features",children:[{value:"API",id:"api",children:[],level:3},{value:"Client",id:"client-3",children:[],level:3},{value:"Automatic JS/TS Client generation",id:"automatic-jsts-client-generation",children:[],level:3},{value:"Interceptors",id:"interceptors",children:[],level:3},{value:"Automatic OpenAPI docs",id:"automatic-openapi-docs",children:[],level:3}],level:2},{value:"Next steps",id:"next-steps",children:[],level:2}],m={toc:d};function v(e){var n=e.components,t=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"what-n1mbly-is"},"What N1mbly is"),(0,c.kt)("p",null,"N1mbly is a JavaScript library that enables rapid development of web applications."),(0,c.kt)("p",null,"It is built on top of the ",(0,c.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," framework and provides additional features like automatic routes registration, client code generation and ",(0,c.kt)("a",{parentName:"p",href:"https://www.openapis.org/"},"OpenAPI")," documentation, along with ",(0,c.kt)("a",{parentName:"p",href:"https://swagger.io/"},"SwaggerUI"),"."),(0,c.kt)("p",null,"Here's a basic example:"),(0,c.kt)(l.Z,{groupId:"lang",mdxType:"Tabs"},(0,c.kt)(i.Z,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"server"},"Server"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const { Nimble, NimblyApi } = require('nimbly-api');\n\nclass UserService {\n  async createUser(user) {\n    // logic for adding the user\n    return user;\n  }\n}\n\nclass AccountService {\n  // UserService is automatically injected\n  constructor({ userService }) {\n    this.userService = userService;\n  }\n\n  async getAllAccounts() {\n    return [];\n  }\n\n  // take accountInfo object as parameter \n  async createAccount({username}) {\n    // logic for adding the account\n    const newAccount = {id: 1, username};\n    // call another service\n    this.userService.createUser({ accountId: newAccount.id })\n    return newAccount;\n  }\n}\n\nconst usersNimble = new Nimble()\n  .addLocalServices(UserService, AccountService);\n\nconst app = new NimblyApi().from(usersNimble);\napp.listen(3000);\n"))),(0,c.kt)(i.Z,{value:"js",label:"ES modules",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"server-1"},"Server"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"import { Nimble, NimblyApi } from 'nimbly-api';\n\nclass UserService {\n  async createUser(user) {\n    // logic for adding the user\n    return user;\n  }\n}\n\nclass AccountService {\n  // UserService is automatically injected\n  constructor({ userService }) {\n    this.userService = userService;\n  }\n\n  async getAllAccounts() {\n    return [];\n  }\n\n  // take accountInfo object as parameter \n  async createAccount({username}) {\n    // logic for adding the account\n    const newAccount = {id: 1, username};\n    // call another service\n    this.userService.createUser({ accountId: newAccount.id })\n    return newAccount;\n  }\n}\n\nconst usersNimble = new Nimble()\n  .addLocalServices(UserService, AccountService);\n\nconst app = new NimblyApi().from(usersNimble);\napp.listen(3000);\n"))),(0,c.kt)(i.Z,{value:"ts",label:"TypeScript",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"server-2"},"Server"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nimble, NimblyApi, Controller, Post, Get } from 'nimbly-api';\n\n@Controller('/users')\nclass UserService {\n  @Post()\n  async createUser(user) {\n    // logic for adding the user\n    return user;\n  }\n}\n\n@Controller('/accounts')\nclass AccountService {\n  // UserService is automatically injected\n  constructor({ userService }) {\n    this.userService = userService;\n  }\n\n  @Get('/all')\n  async getAllAccounts() {\n    return [];\n  }\n\n  // take accountInfo object as parameter \n  async createAccount({username}) {\n    // logic for adding the account\n    const newAccount = {id: 1, username};\n    // call another service\n    this.userService.createUser({ accountId: newAccount.id })\n    return newAccount;\n  }\n}\n\nconst usersNimble = new Nimble()\n  .addLocalServices(UserService, AccountService);\n\nconst app = new NimblyApi().from(usersNimble);\napp.listen(3000);\n")))),(0,c.kt)(l.Z,{groupId:"lang",mdxType:"Tabs"},(0,c.kt)(i.Z,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"client"},"Client"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const { Nimble } = require('nimbly-client');\n\nconst host = 'http://localhost:3000';\n\nclass UserService {\n  async createUser(user) {}\n}\n\nclass AccountService {\n  async getAllAccounts() {}\n  async createAccount(account) {}\n}\n\nconst usersNimble = new Nimble()\n  .addRemoteServices(host, UserService, AccountService);\n\n// The instances are available for custom usage\nconst { userService, accountService } = usersNimble.getAllServices();\n\n// Use the services\naccountService.createAccount({\n  username: 'test',\n})\n.then(newAccount => console.log(newAccount)) // created account from server\n.catch(error => console.log(error));\n\n// Fetch all accounts\nconst allAccounts = await accountService.getAllAccounts();\n"))),(0,c.kt)(i.Z,{value:"js",label:"ES modules",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"client-1"},"Client"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"import { Nimble } from 'nimbly-client';\n\nconst host = 'http://localhost:3000';\n\nclass UserService {\n  async createUser(user) {}\n}\n\nclass AccountService {\n  async getAllAccounts() {}\n  async createAccount(account) {}\n}\n\nconst usersNimble = new Nimble()\n  .addRemoteServices(host, UserService, AccountService);\n\n// The instances are available for custom usage\nconst { userService, accountService } = usersNimble.getAllServices();\n\n// Use the services\naccountService.createAccount({\n  username: 'test',\n})\n.then(newAccount => console.log(newAccount)) // created account from server\n.catch(error => console.log(error));\n\n// Fetch all accounts\nconst allAccounts = await accountService.getAllAccounts();\n"))),(0,c.kt)(i.Z,{value:"ts",label:"TypeScript",default:!0,mdxType:"TabItem"},(0,c.kt)("h4",{id:"client-2"},"Client"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nimble, Controller, Post, Get } from 'nimbly-client';\n\nconst host = 'http://localhost:3000';\n\n// With TS you can use decorators\n@Controller('/users')\nclass UserService {\n  @Post()\n  async createUser(user) {}\n}\n\n@Controller('/accounts')\nclass AccountService {\n  @Get('/all')\n  async getAllAccounts() {}\n  async createAccount(account) {}\n}\n\nconst usersNimble = new Nimble()\n  .addRemoteServices(host, UserService, AccountService);\n\ntype NimblyServices = {\n  userService: UserService,\n  accountService: AccountService\n}\n\n// The instances are available for custom usage\nconst { userService, accountService }: NimblyServices = usersNimble.getAllServices();\n\n// Use the services\naccountService.createAccount({\n  username: 'test',\n})\n.then(newAccount => console.log(newAccount)) // created account from server\n.catch(error => console.log(error));\n\n// Fetch all accounts\nconst allAccounts = await accountService.getAllAccounts();\n")))),(0,c.kt)("h2",{id:"features"},"Features"),(0,c.kt)("p",null,"Here are the features provided by N1mbly:"),(0,c.kt)("h3",{id:"api"},"API"),(0,c.kt)("p",null,"Express Application is automatically created based on the service classes passed to the Nimble."),(0,c.kt)("h3",{id:"client-3"},"Client"),(0,c.kt)("p",null,"Client service proxy is automatically created based on the service classes passed to the Nimble."),(0,c.kt)("h3",{id:"automatic-jsts-client-generation"},"Automatic JS/TS Client generation"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"nimbly-client")," package can be used to auto-generate client service files for the existing API."),(0,c.kt)("h3",{id:"interceptors"},"Interceptors"),(0,c.kt)("p",null,"Both Server and Client support defining interceptors. Most common use case for interceptors is handling Authorization, where the client sends a secret with an identity and the server validates it."),(0,c.kt)("h3",{id:"automatic-openapi-docs"},"Automatic OpenAPI docs"),(0,c.kt)("p",null,"Server automatically builds ",(0,c.kt)("a",{parentName:"p",href:"https://www.openapis.org/"},"OpenAPI")," documentation, and serves ",(0,c.kt)("a",{parentName:"p",href:"https://swagger.io/"},"SwaggerUI")," on route ",(0,c.kt)("inlineCode",{parentName:"p"},"/explorer"),"."),(0,c.kt)("h2",{id:"next-steps"},"Next steps"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"/nimbly/docs/v1/server-installation/"},"Server installation")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"/nimbly/docs/v1/client-installation/"},"Client installation"))))}v.isMDXComponent=!0}}]);