"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[5444],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,k=d["".concat(l,".").concat(u)]||d[u]||p[u]||i;return n?o.createElement(k,r(r({ref:t},m),{},{components:n})):o.createElement(k,r({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6183:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return m},default:function(){return k},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=n(9750),s=n(4996),l=["components"],c={title:"Rooms",sidebar_position:4,slug:"/rooms/"},m=void 0,p={unversionedId:"categories/Interceptors/rooms",id:"categories/Interceptors/rooms",title:"Rooms",description:"A room is an arbitrary channel that sockets can join and leave. It can be used to broadcast events to a subset of clients:",source:"@site/docs/categories/04-Interceptors/rooms.md",sourceDirName:"categories/04-Interceptors",slug:"/rooms/",permalink:"/nimbly/docs/v1/rooms/",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Rooms",sidebar_position:4,slug:"/rooms/"},sidebar:"sidebar",previous:{title:"Broadcasting events",permalink:"/nimbly/docs/v1/broadcasting-events/"},next:{title:"Emit cheatsheet",permalink:"/nimbly/docs/v1/emit-cheatsheet/"}},d=[{value:"Joining and leaving",id:"joining-and-leaving",children:[],level:2},{value:"Default room",id:"default-room",children:[],level:2},{value:"Sample use cases",id:"sample-use-cases",children:[],level:2},{value:"Disconnection",id:"disconnection",children:[],level:2},{value:"With multiple Socket.IO servers",id:"with-multiple-socketio-servers",children:[],level:2},{value:"Implementation details",id:"implementation-details",children:[],level:2},{value:"Room events",id:"room-events",children:[],level:2}],u={toc:d};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"room")," is an arbitrary channel that sockets can ",(0,i.kt)("inlineCode",{parentName:"p"},"join")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"leave"),". It can be used to broadcast events to a subset of clients:"),(0,i.kt)(r.Z,{alt:"Broadcasting to all clients in a room",sources:{light:(0,s.Z)("/images/rooms.png"),dark:(0,s.Z)("/images/rooms-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please note that rooms are a ",(0,i.kt)("strong",{parentName:"p"},"server-only")," concept (i.e. the client does not have access to the list of rooms it has joined)."))),(0,i.kt)("h2",{id:"joining-and-leaving"},"Joining and leaving"),(0,i.kt)("p",null,"You can call ",(0,i.kt)("inlineCode",{parentName:"p"},"join")," to subscribe the socket to a given channel:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.join("some room");\n});\n')),(0,i.kt)("p",null,"And then simply use ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"in")," (they are the same) when broadcasting or emitting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.to("some room").emit("some event");\n')),(0,i.kt)("p",null,"You can emit to several rooms at the same time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.to("room1").to("room2").to("room3").emit("some event");\n')),(0,i.kt)("p",null,"In that case, a ",(0,i.kt)("a",{href:"https://en.wikipedia.org/wiki/Union_(set_theory)"},"union")," is performed: every socket that is at least in one of the rooms will get the event ",(0,i.kt)("strong",{parentName:"p"},"once")," (even if the socket is in two or more rooms)."),(0,i.kt)("p",null,"You can also broadcast to a room from a given socket:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.to("some room").emit("some event");\n});\n')),(0,i.kt)("p",null,"In that case, every socket in the room ",(0,i.kt)("strong",{parentName:"p"},"excluding")," the sender will get the event."),(0,i.kt)(r.Z,{alt:"Broadcasting to all clients in a room excepting the sender",sources:{light:(0,s.Z)("/images/rooms2.png"),dark:(0,s.Z)("/images/rooms2-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("p",null,"To leave a channel you call ",(0,i.kt)("inlineCode",{parentName:"p"},"leave")," in the same fashion as ",(0,i.kt)("inlineCode",{parentName:"p"},"join"),"."),(0,i.kt)("h2",{id:"default-room"},"Default room"),(0,i.kt)("p",null,"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Socket")," in Socket.IO is identified by a random, unguessable, unique identifier ",(0,i.kt)("a",{parentName:"p",href:"/nimbly/docs/v1/server-socket-instance/#socketid"},"Socket#id"),". For your convenience, each socket automatically joins a room identified by its own id."),(0,i.kt)("p",null,"This makes it easy to implement private messages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.on("private message", (anotherSocketId, msg) => {\n    socket.to(anotherSocketId).emit("private message", socket.id, msg);\n  });\n});\n')),(0,i.kt)("h2",{id:"sample-use-cases"},"Sample use cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"broadcast data to each device / tab of a given user")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", async (socket) => {\n  const userId = await fetchUserId(socket);\n\n  socket.join(userId);\n\n  // and then later\n  io.to(userId).emit("hi");\n});\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"send notifications about a given entity")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", async (socket) => {\n  const projects = await fetchProjects(socket);\n\n  projects.forEach(project => socket.join("project:" + project.id));\n\n  // and then later\n  io.to("project:4321").emit("project updated");\n});\n')),(0,i.kt)("h2",{id:"disconnection"},"Disconnection"),(0,i.kt)("p",null,"Upon disconnection, sockets ",(0,i.kt)("inlineCode",{parentName:"p"},"leave")," all the channels they were part of automatically, and no special teardown is needed on your part."),(0,i.kt)("p",null,"You can fetch the rooms the Socket was in by listening to the ",(0,i.kt)("inlineCode",{parentName:"p"},"disconnecting")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", socket => {\n  socket.on("disconnecting", () => {\n    console.log(socket.rooms); // the Set contains at least the socket ID\n  });\n\n  socket.on("disconnect", () => {\n    // socket.rooms.size === 0\n  });\n});\n')),(0,i.kt)("h2",{id:"with-multiple-socketio-servers"},"With multiple Socket.IO servers"),(0,i.kt)("p",null,"Like ",(0,i.kt)("a",{parentName:"p",href:"/nimbly/docs/v1/broadcasting-events/#with-multiple-socketio-servers"},"global broadcasting"),", broadcasting to rooms also works with multiple Socket.IO servers."),(0,i.kt)("p",null,"You just need to replace the default ",(0,i.kt)("a",{parentName:"p",href:"../08-Miscellaneous/glossary.md#adapter"},"Adapter")," by the Redis Adapter. More information about it ",(0,i.kt)("a",{parentName:"p",href:"../05-Adapters/adapter-redis.md"},"here"),"."),(0,i.kt)(r.Z,{alt:"Broadcasting to all clients in a room with Redis",sources:{light:(0,s.Z)("/images/rooms-redis.png"),dark:(0,s.Z)("/images/rooms-redis-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("h2",{id:"implementation-details"},"Implementation details"),(0,i.kt)("p",null,'The "room" feature is implemented by what we call an Adapter. This Adapter is a server-side component which is responsible for:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"storing the relationships between the Socket instances and the rooms"),(0,i.kt)("li",{parentName:"ul"},"broadcasting events to all (or a subset of) clients")),(0,i.kt)("p",null,"You can find the code of the default in-memory adapter ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-adapter"},"here"),"."),(0,i.kt)("p",null,"Basically, it consists in two ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"ES6 Maps"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sids"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Map<SocketId, Set<Room>>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rooms"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Map<Room, Set<SocketId>>"))),(0,i.kt)("p",null,"Calling ",(0,i.kt)("inlineCode",{parentName:"p"},'socket.join("the-room")')," will result in:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in the \u0300",(0,i.kt)("inlineCode",{parentName:"li"},"sids"),' Map, adding "the-room" to the Set identified by the socket ID'),(0,i.kt)("li",{parentName:"ul"},"in the ",(0,i.kt)("inlineCode",{parentName:"li"},"rooms"),' Map, adding the socket ID in the Set identified by the string "the-room"')),(0,i.kt)("p",null,"Those two maps are then used when broadcasting:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a broadcast to all sockets (",(0,i.kt)("inlineCode",{parentName:"li"},"io.emit()"),") loops through the ",(0,i.kt)("inlineCode",{parentName:"li"},"sids")," Map, and send the packet to all sockets"),(0,i.kt)("li",{parentName:"ul"},"a broadcast to a given room (",(0,i.kt)("inlineCode",{parentName:"li"},'io.to("room21").emit()'),") loops through the Set in the ",(0,i.kt)("inlineCode",{parentName:"li"},"rooms")," Map, and sends the packet to all matching sockets")),(0,i.kt)("p",null,"You can access those objects with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// main namespace\nconst rooms = io.of("/").adapter.rooms;\nconst sids = io.of("/").adapter.sids;\n\n// custom namespace\nconst rooms = io.of("/my-namespace").adapter.rooms;\nconst sids = io.of("/my-namespace").adapter.sids;\n')),(0,i.kt)("p",null,"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"those objects are not meant to be directly modified, you should always use ",(0,i.kt)("a",{parentName:"li",href:"/nimbly/docs/v1/server-api/#socketjoinroom"},(0,i.kt)("inlineCode",{parentName:"a"},"socket.join(...)"))," and ",(0,i.kt)("a",{parentName:"li",href:"/nimbly/docs/v1/server-api/#socketleaveroom"},(0,i.kt)("inlineCode",{parentName:"a"},"socket.leave(...)"))," instead."),(0,i.kt)("li",{parentName:"ul"},"in a ",(0,i.kt)("a",{parentName:"li",href:"/nimbly/docs/v1/using-multiple-nodes/"},"multi-server")," setup, the ",(0,i.kt)("inlineCode",{parentName:"li"},"rooms")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sids"),' objects are not shared between the Socket.IO servers (a room may only "exist" on one server and not on another).')),(0,i.kt)("h2",{id:"room-events"},"Room events"),(0,i.kt)("p",null,"Starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io@3.1.0"),", the underlying Adapter will emit the following events:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"create-room")," (argument: room)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete-room")," (argument: room)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"join-room")," (argument: room, id)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leave-room")," (argument: room, id)")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'io.of("/").adapter.on("create-room", (room) => {\n  console.log(`room ${room} was created`);\n});\n\nio.of("/").adapter.on("join-room", (room, id) => {\n  console.log(`socket ${id} has joined room ${room}`);\n});\n')))}k.isMDXComponent=!0}}]);