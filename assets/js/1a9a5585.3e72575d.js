"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[7548],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=o,d=m["".concat(a,".").concat(h)]||m[h]||u[h]||i;return n?r.createElement(d,c(c({ref:t},p),{},{components:n})):r.createElement(d,c({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1303:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),c=["components"],l={title:"Testing",sidebar_position:4,slug:"/testing/"},a=void 0,s={unversionedId:"categories/Documentation/testing",id:"categories/Documentation/testing",title:"Testing",description:"You will find below some code examples with common testing libraries:",source:"@site/docs/categories/01-Documentation/testing.md",sourceDirName:"categories/01-Documentation",slug:"/testing/",permalink:"/nimbly/docs/v1/testing/",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Testing",sidebar_position:4,slug:"/testing/"},sidebar:"sidebar",previous:{title:"Logging and debugging",permalink:"/nimbly/docs/v1/logging-and-debugging/"},next:{title:"Troubleshooting",permalink:"/nimbly/docs/v1/troubleshooting-connection-issues/"}},p=[{value:"Example with <code>mocha</code>",id:"example-with-mocha",children:[],level:2},{value:"Example with <code>jest</code>",id:"example-with-jest",children:[],level:2},{value:"Example with <code>tape</code>",id:"example-with-tape",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You will find below some code examples with common testing libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-with-mocha"},"mocha")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-with-jest"},"jest")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-with-tape"},"tape"))),(0,i.kt)("h2",{id:"example-with-mocha"},"Example with ",(0,i.kt)("inlineCode",{parentName:"h2"},"mocha")),(0,i.kt)("p",null,"Installation: ",(0,i.kt)("inlineCode",{parentName:"p"},"npm i -D mocha chai")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// with { "type": "module" } in your package.json\nimport { createServer } from "http";\nimport { io as Client } from "socket.io-client";\nimport { Server } from "socket.io";\nimport { assert } from "chai";\n\n// with { "type": "commonjs" } in your package.json\n// const { createServer } = require("http");\n// const { Server } = require("socket.io");\n// const Client = require("socket.io-client");\n// const assert = require("chai").assert;\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  before((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = new Client(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  after(() => {\n    io.close();\n    clientSocket.close();\n  });\n\n  it("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      assert.equal(arg, "world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  it("should work (with ack)", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      assert.equal(arg, "hola");\n      done();\n    });\n  });\n});\n')),(0,i.kt)("h2",{id:"example-with-jest"},"Example with ",(0,i.kt)("inlineCode",{parentName:"h2"},"jest")),(0,i.kt)("p",null,"Installation: ",(0,i.kt)("inlineCode",{parentName:"p"},"npm i -D jest")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const { createServer } = require("http");\nconst { Server } = require("socket.io");\nconst Client = require("socket.io-client");\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = new Client(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.close();\n  });\n\n  test("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      expect(arg).toBe("world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  test("should work (with ack)", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      expect(arg).toBe("hola");\n      done();\n    });\n  });\n});\n')),(0,i.kt)("h2",{id:"example-with-tape"},"Example with ",(0,i.kt)("inlineCode",{parentName:"h2"},"tape")),(0,i.kt)("p",null,"Installation: ",(0,i.kt)("inlineCode",{parentName:"p"},"npm i -D tape")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const { createServer } = require("http");\nconst { Server } = require("socket.io");\nconst Client = require("socket.io-client");\nconst test = require("tape");\n\nlet io, serverSocket, clientSocket;\n\ntest("setup", (t) => {\n  const httpServer = createServer();\n  io = new Server(httpServer);\n  httpServer.listen(() => {\n    const port = httpServer.address().port;\n    clientSocket = new Client(`http://localhost:${port}`);\n    io.on("connection", (socket) => {\n      serverSocket = socket;\n    });\n    clientSocket.on("connect", t.end);\n  });\n});\n\ntest("it works", (t) => {\n  t.plan(1);\n  clientSocket.on("hello", (arg) => {\n    t.equal(arg, "world");\n  });\n  serverSocket.emit("hello", "world");\n});\n\ntest("it works (with ack)", (t) => {\n  t.plan(1);\n  serverSocket.on("hi", (cb) => {\n    cb("hola");\n  });\n  clientSocket.emit("hi", (arg) => {\n    t.equal(arg, "hola");\n  });\n});\n\ntest.onFinish(() => {\n  io.close();\n  clientSocket.close();\n});\n')))}m.isMDXComponent=!0}}]);