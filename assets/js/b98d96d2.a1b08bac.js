"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[4931],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8794:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"TypeScript",sidebar_position:6,slug:"/typescript/"},c=void 0,l={unversionedId:"categories/Documentation/typescript",id:"categories/Documentation/typescript",title:"TypeScript",description:"Starting with v3, Socket.IO now has first class support for TypeScript.",source:"@site/docs/categories/01-Documentation/typescript.md",sourceDirName:"categories/01-Documentation",slug:"/typescript/",permalink:"/docs/v1/typescript/",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"TypeScript",sidebar_position:6,slug:"/typescript/"},sidebar:"sidebar",previous:{title:"Troubleshooting",permalink:"/docs/v1/troubleshooting-connection-issues/"},next:{title:"Installation",permalink:"/docs/v1/server-installation/"}},p=[{value:"Types for the server",id:"types-for-the-server",children:[],level:2},{value:"Types for the client",id:"types-for-the-client",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Starting with v3, Socket.IO now has first class support for ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),"."),(0,o.kt)("h2",{id:"types-for-the-server"},"Types for the server"),(0,o.kt)("p",null,"First, declare some types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ServerToClientEvents {\n  noArg: () => void;\n  basicEmit: (a: number, b: string, c: Buffer) => void;\n  withAck: (d: string, callback: (e: number) => void) => void;\n}\n\ninterface ClientToServerEvents {\n  hello: () => void;\n}\n\ninterface InterServerEvents {\n  ping: () => void;\n}\n\ninterface SocketData {\n  name: string;\n  age: number;\n}\n")),(0,o.kt)("p",null,"And use them when creating your server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const io = new Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>();\n")),(0,o.kt)("p",null,"Then, profit from the help of your IDE!"),(0,o.kt)("p",null,"The events declared in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerToClientEvents")," interface are used when sending and broadcasting events:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.emit("noArg");\n  socket.emit("basicEmit", 1, "2", Buffer.from([3]));\n  socket.emit("withAck", "4", (e) => {\n    // e is inferred as number\n  });\n\n  // works when broadcast to all\n  io.emit("noArg");\n\n  // works when broadcasting to a room\n  io.to("room1").emit("basicEmit", 1, "2", Buffer.from([3]));\n});\n')),(0,o.kt)("p",null,"The ones declared in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interface are used when receiving events:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.on("hello", () => {\n    // ...\n  });\n});\n')),(0,o.kt)("p",null,"The ones declared in the ",(0,o.kt)("inlineCode",{parentName:"p"},"InterServerEvents")," interface are used for inter-server communication (added in ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io@4.1.0"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'io.serverSideEmit("ping");\n\nio.on("ping", () => {\n  // ...\n});\n')),(0,o.kt)("p",null,"And finally, the ",(0,o.kt)("inlineCode",{parentName:"p"},"SocketData")," type is used to type the ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.data")," attribute (added in ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io@4.4.0"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.data.name = "john";\n  socket.data.age = 42;\n});\n')),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"These type hints do not replace proper validation/sanitization of the input. As usual, never trust user input."))),(0,o.kt)("h2",{id:"types-for-the-client"},"Types for the client"),(0,o.kt)("p",null,"On the client side, you can reuse the same ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerToClientEvents")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interfaces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { io, Socket } from "socket.io-client";\n\n// please note that the types are reversed\nconst socket: Socket<ServerToClientEvents, ClientToServerEvents> = io();\n')),(0,o.kt)("p",null,"Similarly, the events declared in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interface are used when sending events:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'socket.emit("hello");\n')),(0,o.kt)("p",null,"And the ones declared in ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerToClientEvents")," are used when receiving events:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'socket.on("noArg", () => {\n  // ...\n});\n\nsocket.on("basicEmit", (a, b, c) => {\n  // a is inferred as number, b as string and c as buffer\n});\n\nsocket.on("withAck", (d, callback) => {\n  // d is inferred as string and callback as a function that takes a number as argument\n});\n')))}d.isMDXComponent=!0}}]);