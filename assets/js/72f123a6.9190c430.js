"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[9727],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,k=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9718:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],s={title:"Emitting events",sidebar_position:1,slug:"/emitting-events/"},i=void 0,c={unversionedId:"categories/Interceptors/emitting-events",id:"categories/Interceptors/emitting-events",title:"Emitting events",description:"There are several ways to send events between the server and the client.",source:"@site/docs/categories/04-Interceptors/emitting-events.md",sourceDirName:"categories/04-Interceptors",slug:"/emitting-events/",permalink:"/docs/v1/emitting-events/",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Emitting events",sidebar_position:1,slug:"/emitting-events/"},sidebar:"sidebar",previous:{title:"Usage with bundlers",permalink:"/docs/v1/client-with-bundlers/"},next:{title:"Listening to events",permalink:"/docs/v1/listening-to-events/"}},p=[{value:"Basic emit",id:"basic-emit",children:[],level:2},{value:"Acknowledgements",id:"acknowledgements",children:[],level:2},{value:"With timeout",id:"with-timeout",children:[],level:2},{value:"Volatile events",id:"volatile-events",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are several ways to send events between the server and the client."),(0,o.kt)("h2",{id:"basic-emit"},"Basic emit"),(0,o.kt)("p",null,"The Socket.IO API is inspired from the Node.js ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/docs/latest/api/events.html#events_events"},"EventEmitter"),", which means you can emit events on one side and register listeners on the other:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Server")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.emit("hello", "world");\n});\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.on("hello", (arg) => {\n  console.log(arg); // world\n});\n')),(0,o.kt)("p",null,"This also works in the other direction:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Server")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.on("hello", (arg) => {\n    console.log(arg); // world\n  });\n});\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.emit("hello", "world");\n')),(0,o.kt)("p",null,"You can send any number of arguments, and all serializable datastructures are supported, including binary objects like ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/docs/latest/api/buffer.html#buffer_buffer"},"Buffer")," or ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"},"TypedArray"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Server")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.emit("hello", 1, "2", { 3: \'4\', 5: Buffer.from([6]) });\n});\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// client-side\nsocket.on("hello", (arg1, arg2, arg3) => {\n  console.log(arg1); // 1\n  console.log(arg2); // "2"\n  console.log(arg3); // { 3: \'4\', 5: ArrayBuffer (1) [ 6 ] }\n});\n')),(0,o.kt)("p",null,"There is no need to run ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," on objects as it will be done for you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// BAD\nsocket.emit("hello", JSON.stringify({ name: "John" }));\n\n// GOOD\nsocket.emit("hello", { name: "John" });\n')),(0,o.kt)("p",null,"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date")," objects will be converted to (and received as) their string representation, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"1970-01-01T00:00:00.000Z"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"Map")," and ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"},"Set")," must be manually serialized:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const serializedMap = [...myMap.entries()];\nconst serializedSet = [...mySet.keys()];\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"you can use the ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#tojson_behavior"},(0,o.kt)("inlineCode",{parentName:"a"},"toJSON()"))," method to customize the serialization of an object")),(0,o.kt)("p",null,"Example with a class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'class Hero {\n  #hp;\n\n  constructor() {\n    this.#hp = 42;\n  }\n\n  toJSON() {\n    return { hp: this.#hp };\n  }\n}\n\nsocket.emit("here\'s a hero", new Hero());\n')),(0,o.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,o.kt)("p",null,"Events are great, but in some cases you may want a more classic request-response API. In Socket.IO, this feature is named acknowledgements."),(0,o.kt)("p",null,"You can add a callback as the last argument of the ",(0,o.kt)("inlineCode",{parentName:"p"},"emit()"),", and this callback will be called once the other side acknowledges the event:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Server")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.on("update item", (arg1, arg2, callback) => {\n    console.log(arg1); // 1\n    console.log(arg2); // { name: "updated" }\n    callback({\n      status: "ok"\n    });\n  });\n});\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.emit("update item", "1", { name: "updated" }, (response) => {\n  console.log(response.status); // ok\n});\n')),(0,o.kt)("h2",{id:"with-timeout"},"With timeout"),(0,o.kt)("p",null,"Starting with Socket.IO v4.4.0, you can now assign a timeout to each emit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.timeout(5000).emit("my-event", (err) => {\n  if (err) {\n    // the other side did not acknowledge the event in the given delay\n  }\n});\n')),(0,o.kt)("p",null,"You can also use both a timeout and an ",(0,o.kt)("a",{parentName:"p",href:"#acknowledgements"},"acknowledgement"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.timeout(5000).emit("my-event", (err, response) => {\n  if (err) {\n    // the other side did not acknowledge the event in the given delay\n  } else {\n    console.log(response);\n  }\n});\n')),(0,o.kt)("h2",{id:"volatile-events"},"Volatile events"),(0,o.kt)("p",null,"Volatile events are events that will not be sent if the underlying connection is not ready (a bit like ",(0,o.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/User_Datagram_Protocol"},"UDP"),", in terms of reliability)."),(0,o.kt)("p",null,"This can be interesting for example if you need to send the position of the characters in an online game (as only the latest values are useful)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'socket.volatile.emit("hello", "might or might not be received");\n')),(0,o.kt)("p",null,"Another use case is to discard events when the client is not connected (by default, the events are buffered until reconnection)."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Server")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  console.log("connect");\n\n  socket.on("ping", (count) => {\n    console.log(count);\n  });\n});\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let count = 0;\nsetInterval(() => {\n  socket.volatile.emit("ping", ++count);\n}, 1000);\n')),(0,o.kt)("p",null,"If you restart the server, you will see in the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"connect\n1\n2\n3\n4\n# the server is restarted, the client automatically reconnects\nconnect\n9\n10\n11\n")),(0,o.kt)("p",null,"Without the ",(0,o.kt)("inlineCode",{parentName:"p"},"volatile")," flag, you would see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"connect\n1\n2\n3\n4\n# the server is restarted, the client automatically reconnects and sends its buffered events\nconnect\n5\n6\n7\n8\n9\n10\n11\n")))}m.isMDXComponent=!0}}]);