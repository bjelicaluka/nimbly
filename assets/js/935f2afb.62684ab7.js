"use strict";(self.webpackChunknimbly=self.webpackChunknimbly||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"1.x","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"category","label":"Documentation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"How it works","href":"/nimbly/docs/v1/how-it-works/","docId":"categories/Documentation/how-it-works"},{"type":"link","label":"Logging and debugging","href":"/nimbly/docs/v1/logging-and-debugging/","docId":"categories/Documentation/logging-and-debugging"},{"type":"link","label":"Testing","href":"/nimbly/docs/v1/testing/","docId":"categories/Documentation/testing"},{"type":"link","label":"Troubleshooting","href":"/nimbly/docs/v1/troubleshooting-connection-issues/","docId":"categories/Documentation/troubleshooting"},{"type":"link","label":"TypeScript","href":"/nimbly/docs/v1/typescript/","docId":"categories/Documentation/typescript"}],"href":"/nimbly/docs/v1/"},{"type":"category","label":"Server","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/nimbly/docs/v1/server-installation/","docId":"categories/Server/server-installation"},{"type":"link","label":"Initialization","href":"/nimbly/docs/v1/server-initialization/","docId":"categories/Server/server-initialization"},{"type":"link","label":"The Server instance","href":"/nimbly/docs/v1/server-instance/","docId":"categories/Server/server-instance"},{"type":"link","label":"The Socket instance","href":"/nimbly/docs/v1/server-socket-instance/","docId":"categories/Server/server-socket-instance"},{"type":"link","label":"Middlewares","href":"/nimbly/docs/v1/middlewares/","docId":"categories/Server/middlewares"},{"type":"link","label":"Behind a reverse proxy","href":"/nimbly/docs/v1/reverse-proxy/","docId":"categories/Server/behind-a-reverse-proxy"},{"type":"link","label":"Using multiple nodes","href":"/nimbly/docs/v1/using-multiple-nodes/","docId":"categories/Server/using-multiple-nodes"},{"type":"link","label":"Handling CORS","href":"/nimbly/docs/v1/handling-cors/","docId":"categories/Server/handling-cors"},{"type":"link","label":"Application structure","href":"/nimbly/docs/v1/server-application-structure/","docId":"categories/Server/server-structure"},{"type":"link","label":"Usage with bundlers","href":"/nimbly/docs/v1/server-with-bundlers/","docId":"categories/Server/server-with-bundlers"}]},{"type":"category","label":"Client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/nimbly/docs/v1/client-installation/","docId":"categories/Client/client-installation"},{"type":"link","label":"Initialization","href":"/nimbly/docs/v1/client-initialization/","docId":"categories/Client/client-initialization"},{"type":"link","label":"The Socket instance","href":"/nimbly/docs/v1/client-socket-instance/","docId":"categories/Client/client-socket-instance"},{"type":"link","label":"Offline behavior","href":"/nimbly/docs/v1/client-offline-behavior/","docId":"categories/Client/client-offline-behavior"},{"type":"link","label":"Usage with bundlers","href":"/nimbly/docs/v1/client-with-bundlers/","docId":"categories/Client/client-with-bundlers"}]},{"type":"category","label":"Interceptors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Emitting events","href":"/nimbly/docs/v1/emitting-events/","docId":"categories/Interceptors/emitting-events"},{"type":"link","label":"Listening to events","href":"/nimbly/docs/v1/listening-to-events/","docId":"categories/Interceptors/listening-to-events"},{"type":"link","label":"Broadcasting events","href":"/nimbly/docs/v1/broadcasting-events/","docId":"categories/Interceptors/broadcasting-events"},{"type":"link","label":"Rooms","href":"/nimbly/docs/v1/rooms/","docId":"categories/Interceptors/rooms"},{"type":"link","label":"Emit cheatsheet","href":"/nimbly/docs/v1/emit-cheatsheet/","docId":"categories/Interceptors/emit-cheatsheet"}]}],"serverSidebar":[{"type":"link","label":"API","href":"/nimbly/docs/v1/server-api/","docId":"server-api"},{"type":"link","label":"Options","href":"/nimbly/docs/v1/server-options/","docId":"server-options"}],"clientSidebar":[{"type":"link","label":"API","href":"/nimbly/docs/v1/client-api/","docId":"client-api"},{"type":"link","label":"Options","href":"/nimbly/docs/v1/client-options/","docId":"client-options"}]},"docs":{"categories/Client/client-initialization":{"id":"categories/Client/client-initialization","title":"Client Initialization","description":"Once you have installed the Socket.IO client library, you can now init the client. The complete list of options can be found here.","sidebar":"sidebar"},"categories/Client/client-installation":{"id":"categories/Client/client-installation","title":"Client Installation","description":"Version compatibility","sidebar":"sidebar"},"categories/Client/client-offline-behavior":{"id":"categories/Client/client-offline-behavior","title":"Offline behavior","description":"Buffered events","sidebar":"sidebar"},"categories/Client/client-socket-instance":{"id":"categories/Client/client-socket-instance","title":"The Socket instance (client-side)","description":"A Socket is the fundamental class for interacting with the server. It inherits most of the methods of the Node.js EventEmitter, like emit, on, once or off.","sidebar":"sidebar"},"categories/Client/client-with-bundlers":{"id":"categories/Client/client-with-bundlers","title":"Client usage with bundlers","description":"You will find below the configuration for bundling the client library with different bundlers:","sidebar":"sidebar"},"categories/Documentation/how-it-works":{"id":"categories/Documentation/how-it-works","title":"How it works","description":"The bidirectional channel between the Socket.IO server (Node.js) and the Socket.IO client (browser, Node.js, or another programming language) is established with a WebSocket connection whenever possible, and will use HTTP long-polling as fallback.","sidebar":"sidebar"},"categories/Documentation/index":{"id":"categories/Documentation/index","title":"Introduction","description":"What Socket.IO is","sidebar":"sidebar"},"categories/Documentation/logging-and-debugging":{"id":"categories/Documentation/logging-and-debugging","title":"Logging and debugging","description":"Socket.IO is now completely instrumented by a minimalistic yet tremendously powerful utility called debug by TJ Holowaychuk.","sidebar":"sidebar"},"categories/Documentation/testing":{"id":"categories/Documentation/testing","title":"Testing","description":"You will find below some code examples with common testing libraries:","sidebar":"sidebar"},"categories/Documentation/troubleshooting":{"id":"categories/Documentation/troubleshooting","title":"Troubleshooting connection issues","description":"Common/known issues:","sidebar":"sidebar"},"categories/Documentation/typescript":{"id":"categories/Documentation/typescript","title":"TypeScript","description":"Starting with v3, Socket.IO now has first class support for TypeScript.","sidebar":"sidebar"},"categories/Interceptors/broadcasting-events":{"id":"categories/Interceptors/broadcasting-events","title":"Broadcasting events","description":"Socket.IO makes it easy to send events to all the connected clients.","sidebar":"sidebar"},"categories/Interceptors/emit-cheatsheet":{"id":"categories/Interceptors/emit-cheatsheet","title":"Emit cheatsheet","description":"Server-side","sidebar":"sidebar"},"categories/Interceptors/emitting-events":{"id":"categories/Interceptors/emitting-events","title":"Emitting events","description":"There are several ways to send events between the server and the client.","sidebar":"sidebar"},"categories/Interceptors/listening-to-events":{"id":"categories/Interceptors/listening-to-events","title":"Listening to events","description":"There are several ways to handle events that are transmitted between the server and the client.","sidebar":"sidebar"},"categories/Interceptors/rooms":{"id":"categories/Interceptors/rooms","title":"Rooms","description":"A room is an arbitrary channel that sockets can join and leave. It can be used to broadcast events to a subset of clients:","sidebar":"sidebar"},"categories/Server/behind-a-reverse-proxy":{"id":"categories/Server/behind-a-reverse-proxy","title":"Behind a reverse proxy","description":"You will find below the configuration needed for deploying a Socket.IO server behind a reverse-proxy solution, such as:","sidebar":"sidebar"},"categories/Server/handling-cors":{"id":"categories/Server/handling-cors","title":"Handling CORS","description":"Configuration","sidebar":"sidebar"},"categories/Server/middlewares":{"id":"categories/Server/middlewares","title":"Middlewares","description":"A middleware function is a function that gets executed for every incoming connection.","sidebar":"sidebar"},"categories/Server/server-initialization":{"id":"categories/Server/server-initialization","title":"Server Initialization","description":"Once you have installed the Socket.IO server library, you can now init the server. The complete list of options can be found here.","sidebar":"sidebar"},"categories/Server/server-installation":{"id":"categories/Server/server-installation","title":"Server Installation","description":"Prerequisites","sidebar":"sidebar"},"categories/Server/server-instance":{"id":"categories/Server/server-instance","title":"The Server instance","description":"The Server instance (often called io in the code examples) has a few attributes that may be of use in your application.","sidebar":"sidebar"},"categories/Server/server-socket-instance":{"id":"categories/Server/server-socket-instance","title":"The Socket instance (server-side)","description":"A Socket is the fundamental class for interacting with the client. It inherits all the methods of the Node.js EventEmitter, like emit, on, once or removeListener.","sidebar":"sidebar"},"categories/Server/server-structure":{"id":"categories/Server/server-structure","title":"Application structure","description":"Registering event handlers","sidebar":"sidebar"},"categories/Server/server-with-bundlers":{"id":"categories/Server/server-with-bundlers","title":"Usage with bundlers","description":"While less common than frontend bundling, it is totally possible to create a bundle for the server.","sidebar":"sidebar"},"categories/Server/using-multiple-nodes":{"id":"categories/Server/using-multiple-nodes","title":"Using multiple nodes","description":"When deploying multiple Socket.IO servers, there are two things to take care of:","sidebar":"sidebar"},"client-api":{"id":"client-api","title":"Client API","description":"IO","sidebar":"clientSidebar"},"client-options":{"id":"client-options","title":"Client options","description":"IO factory options","sidebar":"clientSidebar"},"server-api":{"id":"server-api","title":"Server API","description":"Server","sidebar":"serverSidebar"},"server-options":{"id":"server-options","title":"Server options","description":"Socket.IO server options","sidebar":"serverSidebar"}}}')}}]);