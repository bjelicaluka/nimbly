import { ServiceMetaInfo } from "../../shared/types";
import { generate as generateUtil } from "./utils";

export function generate(url: string, dirPath: string, nunjucks: any) {
  generateUtil(url, dirPath, nunjucks, 'js', fileContentFrom, indexFileContentFrom);
}

const serviceTemplate = `// Auto-generated by Nimbly Client CLI
export class {%=o.name%} {
  $nimbly = {%#o.$nimbly%}
{% for (var i=0; i < o.routes.length; i++) { %}
  async {%=o.routes[i].methodName%}({% for (var j=0; j < o.routes[i].pathParams?.length; j++) { %}{%=o.routes[i].pathParams[j]%}{% if(j < o.routes[i].pathParams.length-1 || o.routes[i].body) { %}, {% } %}{% } %}{% if(o.routes[i].body) { %}body{% } %}) {}
{% } %}
}`;

const indexTemplate = `// Auto-generated by Nimbly Client CLI
import { Nimble } from 'nimbly-client';
{% for (var i=0; i < o.services.length; i++) { %}import { {%=o.services[i].name%} as {%=o.services[i].name%}Local } from './{%=o.services[i].name%}';
{% } %}
const host = "{%=o.host%}";

export const {
{% for (var i=0; i < o.services.length; i++) { %} {%=o.services[i].name.charAt(0).toLowerCase() + o.services[i].name.slice(1)%},{% } %}
} = new Nimble()
{% for (var i=0; i < o.services.length; i++) { %}.ofRemote({%=o.services[i].name.charAt(0).toLowerCase() + o.services[i].name.slice(1)%}Local, host)
{% } %}.services();
`;


export function fileContentFrom(service: ServiceMetaInfo, nunjucks: any): string {
  return nunjucks.render('service.njk', {...service, $nimbly: service.$nimbly });
}

export function indexFileContentFrom(services: ServiceMetaInfo[], host: string, nunjucks: any): string {
  return nunjucks.render('index.njk', {services, host});
}