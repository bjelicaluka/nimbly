import { ServiceMetaInfo } from "../../../shared/types";
import * as tmpl from "blueimp-tmpl";
import * as fs from "fs";
import { fetchMeta } from "./utils";

export function generate(url: string, dirPath: string) {
  fetchMeta(url)
    .then((data) => {
      console.log(data);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
      }
      data.forEach((service) => {
        fs.writeFileSync(
          dirPath + `/${service.name}.ts`,
          fileContentFrom(service)
        );
      });

      const indexContent = indexFileContentFrom(data, url);
      fs.writeFileSync(dirPath + `/index.ts`, indexContent);
    })
    .catch((err) => {
      console.log(err);
    });
}

const serviceTemplate = `// Auto-generated by Nimbly Client CLI
import {
  {% if(o.$nimbly.rootPath != null) { %}Service,{% } %}
  {% for (var i=0; i < o.existingMethods.length; i++) { %}{%=o.existingMethods[i]%},
  {% } %}
} from 'nimbly-client';

{% if(o.$nimbly.rootPath != null) { %}@Service('{%=o.$nimbly.rootPath%}'){% } %}
export class {%=o.name%} {
{% for (var i=0; i < o.routes.length; i++) { %}
{% if(o.routes[i].httpMethod) { %}  @{%=o.routes[i].httpMethod%}({% if(o.routes[i].httpMethod) { %}'{%=o.routes[i].methodPath%}'{% } %}){% } %}
  async {%=o.routes[i].methodName%}({% for (var j=0; j < o.routes[i].pathParams?.length; j++) { %}{%=o.routes[i].pathParams[j]%}: any{% if(j < o.routes[i].pathParams.length-1 || o.routes[i].body) { %}, {% } %}{% } %}{% if(o.routes[i].body) { %}body: any{% } %}) {}
{% } %}
}`;

const indexTemplate = `// Auto-generated by Nimbly Client CLI
import { Nimble } from 'nimbly-client';
{% for (var i=0; i < o.services.length; i++) { %}import { {%=o.services[i].name%} as {%=o.services[i].name%}Local } from './{%=o.services[i].name%}';
{% } %}
const host = "{%=o.host%}";

export type NimblyServices = {
  {% for (var i=0; i < o.services.length; i++) { %}{%=o.services[i].name%}: {%=o.services[i].name%}Local;
  {% } %}
};

export const {
{% for (var i=0; i < o.services.length; i++) { %} {%=o.services[i].name%},{% } %}
} : NimblyServices = new Nimble()
{% for (var i=0; i < o.services.length; i++) { %}.ofRemote({%=o.services[i].name%}Local, host)
{% } %}
`;

function capitalizeFirstLetter(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export function fileContentFrom(service: ServiceMetaInfo): string {
  return tmpl(serviceTemplate, {
    ...service,
    routes: service.routes.map((r) => ({
      ...r,
      httpMethod: capitalizeFirstLetter(r.httpMethod.toLowerCase()),
    })),
    existingMethods: [...new Set(service.routes.map((r) => capitalizeFirstLetter(r.httpMethod.toLowerCase())))]
  });
}

export function indexFileContentFrom(
  services: ServiceMetaInfo[],
  host: string
): string {
  return tmpl(indexTemplate, { services, host });
}
