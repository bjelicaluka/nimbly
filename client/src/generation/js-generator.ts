import { ServiceMetaInfo } from "../../../shared/types";
import * as tmpl from 'blueimp-tmpl';
import * as fs from 'fs';
import { fetchMeta } from "./utils";

export function generate(url: string, dirPath: string) {
  fetchMeta(url)
    .then(data => {
      console.log(data);
      if (!fs.existsSync(dirPath)){
        fs.mkdirSync(dirPath, { recursive: true });
      }
      data.forEach(service => {
        fs.writeFileSync(dirPath + `/${service.name}.js`, fileContentFrom(service));
      });

      const indexContent = indexFileContentFrom(data, url);
      fs.writeFileSync(dirPath + `/index.js`, indexContent);
    })
    .catch(err => {
      console.log(err);
    });
}
const serviceTemplate = `// Auto-generated by Nimbly Client CLI
export class {%=o.name%} {
  $nimbly = {%#o.$nimbly%}
{% for (var i=0; i < o.routes.length; i++) { %}
  async {%=o.routes[i].methodName%}({% for (var j=0; j < o.routes[i].pathParams?.length; j++) { %}{%=o.routes[i].pathParams[j]%}{% if(j < o.routes[i].pathParams.length-1 || o.routes[i].body) { %}, {% } %}{% } %}{% if(o.routes[i].body) { %}body{% } %}) {}
{% } %}
}`;

const indexTemplate = `// Auto-generated by Nimbly Client CLI
import { Nimble } from 'nimbly-client';
{% for (var i=0; i < o.services.length; i++) { %}import { {%=o.services[i].name%} as {%=o.services[i].name%}Local } from './{%=o.services[i].name%}';
{% } %}
const host = "{%=o.host%}";

export const {
{% for (var i=0; i < o.services.length; i++) { %} {%=o.services[i].name%},{% } %}
} = new Nimble()
{% for (var i=0; i < o.services.length; i++) { %}.ofRemote({%=o.services[i].name%}Local, host)
{% } %}
`;


export function fileContentFrom(service: ServiceMetaInfo): string {
  return tmpl(serviceTemplate, {...service, $nimbly: JSON.stringify(service.$nimbly, null, 2) });
}

export function indexFileContentFrom(services: ServiceMetaInfo[], host: string): string {
  return tmpl(indexTemplate, {services, host});
}